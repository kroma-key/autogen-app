---
alwaysApply: false
---

# shadcn/ui 컴포넌트 우선 사용 규칙

## 적용 대상 파일들

- `apps/web/app/**/*.tsx`
- `apps/web/components/**/*.tsx`

## 핵심 규칙

### 1. 기존 컴포넌트 활용

- **`packages/ui`에 정의된 shadcn/ui 컴포넌트들을 최우선으로 사용**
- 새로운 UI 요소가 필요할 때는 먼저 기존 컴포넌트로 구현 가능한지 검토
- 기존 컴포넌트의 기능과 스타일을 최대한 활용

### 2. 인터페이스 확장 원칙

- **기존 구현을 해치지 않도록** 컴포넌트를 확장
- **필요시 interface를 확장**하여 추가 props나 기능을 제공
- **기존 컴포넌트의 props와 스타일을 유지**하면서 확장

### 3. 컴포넌트 확장 예시

#### ✅ Good: 기존 Button 컴포넌트 인터페이스 확장

```typescript
import { Button } from "@workspace/ui/components/button";
import { Spinner } from "lucide-react";

interface ExtendedButtonProps extends React.ComponentProps<typeof Button> {
  loading?: boolean;
  icon?: React.ReactNode;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
}

export function ExtendedButton({
  loading,
  icon,
  children,
  disabled,
  ...props
}: ExtendedButtonProps) {
  return (
    <Button
      {...props}
      disabled={loading || disabled}
      className="flex items-center gap-2"
    >
      {loading && <Spinner className="w-4 h-4 animate-spin" />}
      {icon && <span className="flex items-center">{icon}</span>}
      {children}
    </Button>
  );
}
```

#### ✅ Good: 기존 Card 컴포넌트 활용

```typescript
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@workspace/ui/components/card";

interface UserCardProps {
  user: User;
  onEdit?: () => void;
  onDelete?: () => void;
}

export function UserCard({ user, onEdit, onDelete }: UserCardProps) {
  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Avatar className="w-8 h-8">
            <AvatarImage src={user.avatarUrl} alt={user.name} />
            <AvatarFallback>{user.initials}</AvatarFallback>
          </Avatar>
          {user.name}
        </CardTitle>
        <CardDescription>{user.email}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex gap-2">
          {onEdit && (
            <Button variant="outline" size="sm" onClick={onEdit}>
              수정
            </Button>
          )}
          {onDelete && (
            <Button variant="destructive" size="sm" onClick={onDelete}>
              삭제
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
```

#### ❌ Bad: 기존 컴포넌트를 완전히 재작성

```typescript
// ❌ Bad: 기존 Button 컴포넌트 무시
export function CustomButton({ children, ...props }) {
  return (
    <button
      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      {...props}
    >
      {children}
    </button>
  );
}
```

### 4. 레이아웃 컴포넌트 활용

#### ✅ Good: Sidebar 컴포넌트 활용

```typescript
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
} from "@workspace/ui/components/sidebar";

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/dashboard">
                <IconDashboard className="w-5 h-5" />
                <span>대시보드</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarHeader>
      <SidebarContent>
        {/* 사이드바 내용 */}
      </SidebarContent>
      <SidebarFooter>
        {/* 사이드바 푸터 */}
      </SidebarFooter>
    </Sidebar>
  );
}
```

### 5. 폼 컴포넌트 활용

#### ✅ Good: Form 컴포넌트 활용

```typescript
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@workspace/ui/components/form";
import { Input } from "@workspace/ui/components/input";
import { Button } from "@workspace/ui/components/button";

const formSchema = z.object({
  username: z.string().min(2).max(50),
  email: z.string().email(),
});

export function UserForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
      email: "",
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    console.log(values);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>사용자명</FormLabel>
              <FormControl>
                <Input placeholder="사용자명을 입력하세요" {...field} />
              </FormControl>
              <FormDescription>
                2-50자 사이의 사용자명을 입력하세요.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">제출</Button>
      </form>
    </Form>
  );
}
```

## 컴포넌트 선택 가이드

### 기본 UI 요소

- **Button**: 모든 버튼에 사용
- **Input**: 텍스트 입력에 사용
- **Label**: 폼 라벨에 사용
- **Card**: 카드 형태의 컨테이너에 사용

### 레이아웃

- **Sidebar**: 사이드바 네비게이션에 사용
- **Sheet**: 슬라이드 패널에 사용
- **Dialog**: 모달 다이얼로그에 사용
- **Tabs**: 탭 인터페이스에 사용

### 데이터 표시

- **Table**: 데이터 테이블에 사용
- **Badge**: 상태나 카테고리 표시에 사용
- **Avatar**: 사용자 프로필 이미지에 사용
- **Progress**: 진행률 표시에 사용

### 폼

- **Form**: 모든 폼에 사용
- **Select**: 드롭다운 선택에 사용
- **Checkbox**: 체크박스에 사용
- **RadioGroup**: 라디오 버튼 그룹에 사용
# shadcn/ui 컴포넌트 우선 사용 규칙

## 적용 대상 파일들

- `apps/web/app/**/*.tsx`
- `apps/web/components/**/*.tsx`

## 핵심 규칙

### 1. 기존 컴포넌트 활용

- **`packages/ui`에 정의된 shadcn/ui 컴포넌트들을 최우선으로 사용**
- 새로운 UI 요소가 필요할 때는 먼저 기존 컴포넌트로 구현 가능한지 검토
- 기존 컴포넌트의 기능과 스타일을 최대한 활용

### 2. 인터페이스 확장 원칙

- **기존 구현을 해치지 않도록** 컴포넌트를 확장
- **필요시 interface를 확장**하여 추가 props나 기능을 제공
- **기존 컴포넌트의 props와 스타일을 유지**하면서 확장

### 3. 컴포넌트 확장 예시

#### ✅ Good: 기존 Button 컴포넌트 인터페이스 확장

```typescript
import { Button } from "@workspace/ui/components/button";
import { Spinner } from "lucide-react";

interface ExtendedButtonProps extends React.ComponentProps<typeof Button> {
  loading?: boolean;
  icon?: React.ReactNode;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
}

export function ExtendedButton({
  loading,
  icon,
  children,
  disabled,
  ...props
}: ExtendedButtonProps) {
  return (
    <Button
      {...props}
      disabled={loading || disabled}
      className="flex items-center gap-2"
    >
      {loading && <Spinner className="w-4 h-4 animate-spin" />}
      {icon && <span className="flex items-center">{icon}</span>}
      {children}
    </Button>
  );
}
```

#### ✅ Good: 기존 Card 컴포넌트 활용

```typescript
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@workspace/ui/components/card";

interface UserCardProps {
  user: User;
  onEdit?: () => void;
  onDelete?: () => void;
}

export function UserCard({ user, onEdit, onDelete }: UserCardProps) {
  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Avatar className="w-8 h-8">
            <AvatarImage src={user.avatarUrl} alt={user.name} />
            <AvatarFallback>{user.initials}</AvatarFallback>
          </Avatar>
          {user.name}
        </CardTitle>
        <CardDescription>{user.email}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex gap-2">
          {onEdit && (
            <Button variant="outline" size="sm" onClick={onEdit}>
              수정
            </Button>
          )}
          {onDelete && (
            <Button variant="destructive" size="sm" onClick={onDelete}>
              삭제
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
```

#### ❌ Bad: 기존 컴포넌트를 완전히 재작성

```typescript
// ❌ Bad: 기존 Button 컴포넌트 무시
export function CustomButton({ children, ...props }) {
  return (
    <button
      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      {...props}
    >
      {children}
    </button>
  );
}
```

### 4. 레이아웃 컴포넌트 활용

#### ✅ Good: Sidebar 컴포넌트 활용

```typescript
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
} from "@workspace/ui/components/sidebar";

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton asChild>
              <Link href="/dashboard">
                <IconDashboard className="w-5 h-5" />
                <span>대시보드</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarHeader>
      <SidebarContent>
        {/* 사이드바 내용 */}
      </SidebarContent>
      <SidebarFooter>
        {/* 사이드바 푸터 */}
      </SidebarFooter>
    </Sidebar>
  );
}
```

### 5. 폼 컴포넌트 활용

#### ✅ Good: Form 컴포넌트 활용

```typescript
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@workspace/ui/components/form";
import { Input } from "@workspace/ui/components/input";
import { Button } from "@workspace/ui/components/button";

const formSchema = z.object({
  username: z.string().min(2).max(50),
  email: z.string().email(),
});

export function UserForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
      email: "",
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    console.log(values);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>사용자명</FormLabel>
              <FormControl>
                <Input placeholder="사용자명을 입력하세요" {...field} />
              </FormControl>
              <FormDescription>
                2-50자 사이의 사용자명을 입력하세요.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">제출</Button>
      </form>
    </Form>
  );
}
```

## 컴포넌트 선택 가이드

### 기본 UI 요소

- **Button**: 모든 버튼에 사용
- **Input**: 텍스트 입력에 사용
- **Label**: 폼 라벨에 사용
- **Card**: 카드 형태의 컨테이너에 사용

### 레이아웃

- **Sidebar**: 사이드바 네비게이션에 사용
- **Sheet**: 슬라이드 패널에 사용
- **Dialog**: 모달 다이얼로그에 사용
- **Tabs**: 탭 인터페이스에 사용

### 데이터 표시

- **Table**: 데이터 테이블에 사용
- **Badge**: 상태나 카테고리 표시에 사용
- **Avatar**: 사용자 프로필 이미지에 사용
- **Progress**: 진행률 표시에 사용

### 폼

- **Form**: 모든 폼에 사용
- **Select**: 드롭다운 선택에 사용
- **Checkbox**: 체크박스에 사용
- **RadioGroup**: 라디오 버튼 그룹에 사용
