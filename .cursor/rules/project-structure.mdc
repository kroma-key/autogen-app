---
alwaysApply: true
---

# 프로젝트 구조 및 의존성 관리 규칙

## 모노레포 구조 준수

### 1. 디렉토리 구조 원칙

#### packages/ 디렉토리 활용

- **공통 패키지들을 우선적으로 활용**하여 코드 중복 방지
- **새로운 공통 기능이 필요하면 적절한 패키지에 추가**
- **앱별 코드는 apps/ 디렉토리에만 작성**

```
packages/
├── ui/                    # shadcn/ui 컴포넌트
├── supabase/             # Supabase 관련 공통 로직
├── eslint-config/        # ESLint 설정
└── typescript-config/    # TypeScript 설정

apps/
├── web/                  # 웹 애플리케이션
│   ├── app/             # Next.js App Router
│   ├── components/       # 웹 전용 컴포넌트
│   ├── lib/             # 웹 전용 유틸리티
│   └── hooks/           # 웹 전용 훅
└── [other-apps]/        # 다른 애플리케이션들
```

### 2. 패키지별 책임 분리

#### @workspace/ui 패키지

- **shadcn/ui 컴포넌트들을 중앙 집중 관리**
- **컴포넌트 확장 시 기존 구현을 해치지 않도록 주의**
- **일관된 디자인 시스템 유지**

```typescript
// ✅ Good: 기존 컴포넌트 확장
import { Button } from "@workspace/ui/components/button";

interface LoadingButtonProps extends React.ComponentProps<typeof Button> {
  loading?: boolean;
}

export function LoadingButton({ loading, children, ...props }: LoadingButtonProps) {
  return (
    <Button {...props} disabled={loading || props.disabled}>
      {loading && <Spinner className="w-4 h-4 mr-2 animate-spin" />}
      {children}
    </Button>
  );
}
```

#### @workspace/supabase 패키지

- **Supabase 관련 공통 로직 중앙 집중**
- **함수형 프로그래밍 패러다임 적용**
- **타입 안전성과 재사용성 우선**

```typescript
// ✅ Good: 함수형 패러다임 적용
import { pipe, map, filter, toArray } from "fxts";

export const getActiveUsers = pipe(
  users,
  filter((user) => user.status === "active"),
  map((user) => ({
    id: user.id,
    name: user.profile?.name || user.email?.split("@")[0] || "Unknown",
    email: user.email,
  })),
  toArray
);
```

### 3. 의존성 관리 원칙

#### 새로운 외부 라이브러리 추가

- **팀과 상의 후 추가**: 성능, 번들 크기, 유지보수성 고려
- **기존 패키지로 대체 가능한지 검토** 후 추가 여부 결정
- **라이브러리 선택 시 다음 기준 고려**:
  - TypeScript 지원 여부
  - 번들 크기
  - 활발한 유지보수
  - 커뮤니티 지원

#### 기존 패키지 버전 업데이트

- **신중하게 진행**: breaking changes 여부 확인
- **단계적 업데이트**: major 버전 업데이트 시 마이그레이션 계획 수립
- **테스트 커버리지 확보** 후 업데이트 진행

### 4. 파일 배치 규칙

#### 공통 로직

```
packages/supabase/src/
├── hooks/           # 공통 훅
├── utils/           # 공통 유틸리티 함수
├── types/           # 공통 타입 정의
└── constants/       # 공통 상수
```

#### 앱별 로직

```
apps/web/
├── lib/             # 웹 전용 유틸리티
├── hooks/           # 웹 전용 훅
├── components/      # 웹 전용 컴포넌트
└── app/             # Next.js 페이지 및 레이아웃
```

### 5. import 경로 규칙

#### 절대 경로 사용

```typescript
// ✅ Good: 절대 경로 사용
import { Button } from "@workspace/ui/components/button";
import { useAuth } from "@workspace/supabase";
import { formatDate } from "@/lib/utils";

// ❌ Bad: 상대 경로 사용
import { Button } from "../../../../packages/ui/components/button";
import { useAuth } from "../../../../packages/supabase";
```

#### 경로 별칭 설정

```typescript
// tsconfig.json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./apps/web/*"],
      "@workspace/*": ["./packages/*"]
    }
  }
}
```

### 6. 코드 분리 원칙

#### 관심사 분리

- **비즈니스 로직과 UI 로직 분리**
- **데이터 처리와 상태 관리 분리**
- **공통 로직과 앱별 로직 분리**

```typescript
// ✅ Good: 관심사 분리
// hooks/use-user-data.ts - 데이터 처리 로직
export function useUserData(userId: string) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchUserData(userId).then(setUser).finally(() => setLoading(false));
  }, [userId]);

  return { user, loading };
}

// components/user-profile.tsx - UI 로직
export function UserProfile({ userId }: { userId: string }) {
  const { user, loading } = useUserData(userId);

  if (loading) return <UserProfileSkeleton />;
  if (!user) return <UserNotFound />;

  return (
    <Card>
      <CardHeader>
        <CardTitle>{user.name}</CardTitle>
        <CardDescription>{user.email}</CardDescription>
      </CardHeader>
    </Card>
  );
}
```

### 7. 모노레포 빌드 최적화

#### Turborepo 설정

```json
// turbo.json
{
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".next/**", "!.next/cache/**"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    }
  }
}
```

#### 패키지 간 의존성 관리

```json
// packages/supabase/package.json
{
  "dependencies": {
    "@supabase/supabase-js": "^2.55.0"
  },
  "peerDependencies": {
    "react": "^19.1.1"
  }
}
```

## 구조 준수 체크리스트

- [ ] 새로운 공통 기능이 적절한 패키지에 추가되었는가?
- [ ] 앱별 코드가 apps/ 디렉토리에만 작성되었는가?
- [ ] 절대 경로를 사용하여 import하고 있는가?
- [ ] 관심사가 적절히 분리되었는가?
- [ ] 기존 패키지의 구현을 해치지 않고 확장했는가?
- [ ] 새로운 외부 라이브러리 추가 시 팀과 상의했는가?
- [ ] 패키지 간 의존성이 올바르게 설정되었는가?

# 프로젝트 구조 및 의존성 관리 규칙

## 모노레포 구조 준수

### 1. 디렉토리 구조 원칙

#### packages/ 디렉토리 활용

- **공통 패키지들을 우선적으로 활용**하여 코드 중복 방지
- **새로운 공통 기능이 필요하면 적절한 패키지에 추가**
- **앱별 코드는 apps/ 디렉토리에만 작성**

```
packages/
├── ui/                    # shadcn/ui 컴포넌트
├── supabase/             # Supabase 관련 공통 로직
├── eslint-config/        # ESLint 설정
└── typescript-config/    # TypeScript 설정

apps/
├── web/                  # 웹 애플리케이션
│   ├── app/             # Next.js App Router
│   ├── components/       # 웹 전용 컴포넌트
│   ├── lib/             # 웹 전용 유틸리티
│   └── hooks/           # 웹 전용 훅
└── [other-apps]/        # 다른 애플리케이션들
```

### 2. 패키지별 책임 분리

#### @workspace/ui 패키지

- **shadcn/ui 컴포넌트들을 중앙 집중 관리**
- **컴포넌트 확장 시 기존 구현을 해치지 않도록 주의**
- **일관된 디자인 시스템 유지**

```typescript
// ✅ Good: 기존 컴포넌트 확장
import { Button } from "@workspace/ui/components/button";

interface LoadingButtonProps extends React.ComponentProps<typeof Button> {
  loading?: boolean;
}

export function LoadingButton({ loading, children, ...props }: LoadingButtonProps) {
  return (
    <Button {...props} disabled={loading || props.disabled}>
      {loading && <Spinner className="w-4 h-4 mr-2 animate-spin" />}
      {children}
    </Button>
  );
}
```

#### @workspace/supabase 패키지

- **Supabase 관련 공통 로직 중앙 집중**
- **함수형 프로그래밍 패러다임 적용**
- **타입 안전성과 재사용성 우선**

```typescript
// ✅ Good: 함수형 패러다임 적용
import { pipe, map, filter, toArray } from "fxts";

export const getActiveUsers = pipe(
  users,
  filter((user) => user.status === "active"),
  map((user) => ({
    id: user.id,
    name: user.profile?.name || user.email?.split("@")[0] || "Unknown",
    email: user.email,
  })),
  toArray
);
```

### 3. 의존성 관리 원칙

#### 새로운 외부 라이브러리 추가

- **팀과 상의 후 추가**: 성능, 번들 크기, 유지보수성 고려
- **기존 패키지로 대체 가능한지 검토** 후 추가 여부 결정
- **라이브러리 선택 시 다음 기준 고려**:
  - TypeScript 지원 여부
  - 번들 크기
  - 활발한 유지보수
  - 커뮤니티 지원

#### 기존 패키지 버전 업데이트

- **신중하게 진행**: breaking changes 여부 확인
- **단계적 업데이트**: major 버전 업데이트 시 마이그레이션 계획 수립
- **테스트 커버리지 확보** 후 업데이트 진행

### 4. 파일 배치 규칙

#### 공통 로직

```
packages/supabase/src/
├── hooks/           # 공통 훅
├── utils/           # 공통 유틸리티 함수
├── types/           # 공통 타입 정의
└── constants/       # 공통 상수
```

#### 앱별 로직

```
apps/web/
├── lib/             # 웹 전용 유틸리티
├── hooks/           # 웹 전용 훅
├── components/      # 웹 전용 컴포넌트
└── app/             # Next.js 페이지 및 레이아웃
```

### 5. import 경로 규칙

#### 절대 경로 사용

```typescript
// ✅ Good: 절대 경로 사용
import { Button } from "@workspace/ui/components/button";
import { useAuth } from "@workspace/supabase";
import { formatDate } from "@/lib/utils";

// ❌ Bad: 상대 경로 사용
import { Button } from "../../../../packages/ui/components/button";
import { useAuth } from "../../../../packages/supabase";
```

#### 경로 별칭 설정

```typescript
// tsconfig.json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./apps/web/*"],
      "@workspace/*": ["./packages/*"]
    }
  }
}
```

### 6. 코드 분리 원칙

#### 관심사 분리

- **비즈니스 로직과 UI 로직 분리**
- **데이터 처리와 상태 관리 분리**
- **공통 로직과 앱별 로직 분리**

```typescript
// ✅ Good: 관심사 분리
// hooks/use-user-data.ts - 데이터 처리 로직
export function useUserData(userId: string) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchUserData(userId).then(setUser).finally(() => setLoading(false));
  }, [userId]);

  return { user, loading };
}

// components/user-profile.tsx - UI 로직
export function UserProfile({ userId }: { userId: string }) {
  const { user, loading } = useUserData(userId);

  if (loading) return <UserProfileSkeleton />;
  if (!user) return <UserNotFound />;

  return (
    <Card>
      <CardHeader>
        <CardTitle>{user.name}</CardTitle>
        <CardDescription>{user.email}</CardDescription>
      </CardHeader>
    </Card>
  );
}
```

### 7. 모노레포 빌드 최적화

#### Turborepo 설정

```json
// turbo.json
{
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".next/**", "!.next/cache/**"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    }
  }
}
```

#### 패키지 간 의존성 관리

```json
// packages/supabase/package.json
{
  "dependencies": {
    "@supabase/supabase-js": "^2.55.0"
  },
  "peerDependencies": {
    "react": "^19.1.1"
  }
}
```

## 구조 준수 체크리스트

- [ ] 새로운 공통 기능이 적절한 패키지에 추가되었는가?
- [ ] 앱별 코드가 apps/ 디렉토리에만 작성되었는가?
- [ ] 절대 경로를 사용하여 import하고 있는가?
- [ ] 관심사가 적절히 분리되었는가?
- [ ] 기존 패키지의 구현을 해치지 않고 확장했는가?
- [ ] 새로운 외부 라이브러리 추가 시 팀과 상의했는가?
- [ ] 패키지 간 의존성이 올바르게 설정되었는가?
